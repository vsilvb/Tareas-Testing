# Automatically generated by Pynguin.
import pytest
import src.display_number as module_0


def test_case_0():
    int_0 = -2884
    str_0 = 'BEMn5X#'
    bytes_0 = b'C'
    int_1 = -1628
    bool_0 = True
    number_display_0 = module_0.NumberDisplay(int_1, bool_0)
    assert number_display_0.value == -1628
    assert number_display_0.limit is True
    var_0 = number_display_0.clone()
    assert var_0.value == -1628
    assert var_0.limit is True
    list_0 = [bytes_0, str_0, bytes_0, str_0]
    float_0 = 1335.89
    dict_0 = {}
    tuple_0 = list_0, float_0, dict_0, int_0
    number_display_1 = module_0.NumberDisplay(bytes_0, tuple_0)
    assert number_display_1.value == b'C'
    assert len(number_display_1.limit) == 4
    var_1 = number_display_1.clone()
    assert var_1.value == b'C'
    assert len(var_1.limit) == 4
    number_display_2 = module_0.NumberDisplay(int_0, str_0)
    assert number_display_2.value == -2884
    assert number_display_2.limit == 'BEMn5X#'
    var_2 = number_display_2.str()
    assert var_2 == '0-2884'
    var_3 = number_display_1.clone()
    assert var_3.value == b'C'
    assert len(var_3.limit) == 4


def test_case_1():
    int_0 = 678
    set_0 = {int_0, int_0, int_0}
    str_0 = '}B'
    float_0 = -2403.12361
    bool_0 = False
    int_1 = 881
    tuple_0 = bool_0, int_1
    number_display_0 = module_0.NumberDisplay(tuple_0, set_0)
    assert number_display_0.value == (False, 881)
    assert number_display_0.limit == {678}
    float_1 = -2343.832079
    tuple_1 = float_0, number_display_0, float_1
    number_display_1 = module_0.NumberDisplay(str_0, tuple_1)
    assert number_display_1.value == '}B'
    assert len(number_display_1.limit) == 3
    var_0 = number_display_1.clone()
    assert var_0.value == '}B'
    assert len(var_0.limit) == 3
    number_display_2 = module_0.NumberDisplay(int_0, set_0)
    assert number_display_2.value == 678
    assert number_display_2.limit == {678}
    var_1 = number_display_2.str()
    assert var_1 == '678'
    str_1 = '}?ZUtoX_3\tE'
    list_0 = [str_1, set_0, set_0]
    number_display_3 = module_0.NumberDisplay(str_1, list_0)
    assert number_display_3.value == '}?ZUtoX_3\tE'
    assert number_display_3.limit == ['}?ZUtoX_3\tE', {678}, {678}]
    var_2 = number_display_2.str()
    assert var_2 == '678'


def test_case_2():
    int_0 = 1381
    dict_0 = {int_0: int_0}
    number_display_0 = module_0.NumberDisplay(int_0, dict_0)
    assert number_display_0.value == 1381
    assert number_display_0.limit == {(1381): 1381}
    var_0 = number_display_0.clone()
    assert var_0.value == 1381
    assert var_0.limit == {(1381): 1381}


def test_case_3():
    float_0 = -1575.425
    bytes_0 = b''
    float_1 = 2740.0008
    number_display_0 = module_0.NumberDisplay(bytes_0, float_1)
    assert number_display_0.value == b''
    assert number_display_0.limit == pytest.approx(2740.0008, abs=0.01, rel
        =0.01)
    var_0 = number_display_0.reset()
    assert number_display_0.value == 0
    number_display_1 = module_0.NumberDisplay(float_0, number_display_0)
    assert number_display_1.value == pytest.approx(-1575.425, abs=0.01, rel
        =0.01)
    number_display_2 = module_0.NumberDisplay(bytes_0, number_display_1)
    assert number_display_2.value == b''
    var_1 = number_display_1.reset()
    assert number_display_1.value == 0
    bytes_1 = b'[\x9f5-\xa4'
    list_0 = [bytes_1, bytes_1, bytes_1]
    number_display_3 = module_0.NumberDisplay(bytes_1, list_0)
    assert number_display_3.value == b'[\x9f5-\xa4'
    assert number_display_3.limit == [b'[\x9f5-\xa4', b'[\x9f5-\xa4',
        b'[\x9f5-\xa4']
