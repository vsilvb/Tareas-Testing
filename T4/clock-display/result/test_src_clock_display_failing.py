# Automatically generated by Pynguin.
import src.clock_display as module_0


def test_case_0():
    try:
        set_0 = set()
        clock_display_0 = module_0.ClockDisplay(set_0)
        assert clock_display_0.numbers == []
        var_0 = clock_display_0.invariant()
        var_1 = clock_display_0.clone()
        assert var_1.numbers == []
        var_2 = clock_display_0.clone()
        assert var_2.numbers == []
        var_3 = clock_display_0.str()
        var_4 = clock_display_0.str()
        var_5 = clock_display_0.str()
        var_6 = clock_display_0.increment()
        assert var_6 is None
        var_7 = clock_display_0.str()
        assert var_7 == ''
        float_0 = -584.28
        clock_display_1 = module_0.ClockDisplay(set_0)
        assert clock_display_1.numbers == []
        clock_display_2 = module_0.ClockDisplay(float_0)
    except BaseException:
        pass


def test_case_1():
    try:
        str_0 = '13*oMUnET5s'
        clock_display_0 = module_0.ClockDisplay(str_0)
        assert len(clock_display_0.numbers) == 11
        var_0 = clock_display_0.invariant()
    except BaseException:
        pass


def test_case_2():
    try:
        bytes_0 = b']I/\xfbr\xa4\xe2\xaeof\xda\x10VUY\x0e*\xac'
        clock_display_0 = module_0.ClockDisplay(bytes_0)
        assert len(clock_display_0.numbers) == 18
        var_0 = clock_display_0.invariant()
        str_0 = '\t\r'
        var_1 = clock_display_0.increment()
        assert var_1 is None
        int_0 = -198
        dict_0 = {str_0: str_0, bytes_0: var_0, str_0: var_0, bytes_0: int_0}
        clock_display_1 = module_0.ClockDisplay(dict_0)
        assert len(clock_display_1.numbers) == 2
    except BaseException:
        pass


def test_case_3():
    try:
        float_0 = 816.0
        clock_display_0 = module_0.ClockDisplay(float_0)
    except BaseException:
        pass


def test_case_4():
    try:
        set_0 = set()
        bytes_0 = b"^\x19\xd4z\xa0\xf7F\xb6\x89\xc0\xc6\x16:\xb6'"
        list_0 = [bytes_0, set_0]
        tuple_0 = set_0, set_0, list_0
        clock_display_0 = module_0.ClockDisplay(tuple_0)
        assert len(clock_display_0.numbers) == 3
        var_0 = clock_display_0.clone()
        assert len(var_0.numbers) == 3
        str_0 = ':'
        clock_display_1 = module_0.ClockDisplay(str_0)
        assert len(clock_display_1.numbers) == 1
        var_1 = clock_display_1.clone()
        assert len(var_1.numbers) == 1
        var_2 = clock_display_1.increment()
    except BaseException:
        pass


def test_case_5():
    try:
        int_0 = -711
        set_0 = set()
        clock_display_0 = module_0.ClockDisplay(set_0)
        assert clock_display_0.numbers == []
        var_0 = clock_display_0.str()
        list_0 = [int_0]
        dict_0 = {int_0: int_0}
        clock_display_1 = module_0.ClockDisplay(dict_0)
        assert len(clock_display_1.numbers) == 1
        var_1 = clock_display_1.increment()
        assert var_1 is None
        clock_display_2 = module_0.ClockDisplay(list_0)
        assert len(clock_display_2.numbers) == 1
        var_2 = clock_display_2.invariant()
        assert var_2 is False
        var_3 = clock_display_2.str()
        assert var_3 == '00'
        var_4 = clock_display_2.clone()
        assert len(var_4.numbers) == 1
        str_0 = '-'
        clock_display_3 = module_0.ClockDisplay(str_0)
        assert len(clock_display_3.numbers) == 1
        clock_display_4 = module_0.ClockDisplay(dict_0)
        assert len(clock_display_4.numbers) == 1
        var_5 = clock_display_4.increment()
        assert var_5 is None
        set_1 = {var_5, var_3, clock_display_1, var_5}
        float_0 = -407.7528
        bool_0 = True
        tuple_0 = set_1, float_0, bool_0
        clock_display_5 = module_0.ClockDisplay(tuple_0)
        assert len(clock_display_5.numbers) == 3
        var_6 = clock_display_5.increment()
        assert var_6 is None
        clock_display_6 = module_0.ClockDisplay(int_0)
    except BaseException:
        pass
