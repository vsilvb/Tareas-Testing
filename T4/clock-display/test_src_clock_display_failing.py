# Automatically generated by Pynguin.
import src.clock_display as module_0


def test_case_0():
    try:
        str_0 = 'gN^s#~6IyWN^)})yB'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        clock_display_0 = module_0.ClockDisplay(dict_0)
        assert len(clock_display_0.numbers) == 1
        var_0 = clock_display_0.increment()
    except BaseException:
        pass


def test_case_1():
    try:
        bool_0 = False
        float_0 = 1427.656546
        set_0 = set()
        tuple_0 = bool_0, float_0, set_0
        clock_display_0 = module_0.ClockDisplay(tuple_0)
        assert len(clock_display_0.numbers) == 3
        var_0 = clock_display_0.str()
        assert var_0 == '00:00:00'
        var_1 = clock_display_0.clone()
        assert len(var_1.numbers) == 3
        set_1 = set()
        clock_display_1 = module_0.ClockDisplay(set_1)
        assert clock_display_1.numbers == []
        var_2 = clock_display_1.clone()
        assert var_2.numbers == []
        var_3 = clock_display_0.clone()
        assert len(var_3.numbers) == 3
        var_4 = clock_display_1.invariant()
        var_5 = clock_display_1.increment()
        assert var_5 is None
        var_6 = clock_display_1.str()
        assert var_6 == ''
        clock_display_2 = module_0.ClockDisplay(tuple_0)
        assert len(clock_display_2.numbers) == 3
        var_7 = clock_display_2.str()
        assert var_7 == '00:00:00'
        clock_display_3 = module_0.ClockDisplay(clock_display_2)
    except BaseException:
        pass


def test_case_2():
    try:
        str_0 = ')\rv%_`LB3_'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0]
        clock_display_0 = module_0.ClockDisplay(list_0)
        assert len(clock_display_0.numbers) == 2
        var_0 = clock_display_0.invariant()
    except BaseException:
        pass


def test_case_3():
    try:
        int_0 = -2140
        list_0 = [int_0, int_0, int_0]
        clock_display_0 = module_0.ClockDisplay(list_0)
        assert len(clock_display_0.numbers) == 3
        clock_display_1 = module_0.ClockDisplay(clock_display_0)
    except BaseException:
        pass


def test_case_4():
    try:
        str_0 = 'gN^s#~6IyWN^)})yB'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, str_0]
        clock_display_0 = module_0.ClockDisplay(list_0)
        assert len(clock_display_0.numbers) == 2
        set_0 = {clock_display_0, str_0}
        int_0 = -1889
        tuple_0 = clock_display_0, set_0, int_0, list_0
        clock_display_1 = module_0.ClockDisplay(tuple_0)
        assert len(clock_display_1.numbers) == 4
        var_0 = clock_display_1.str()
        assert var_0 == '00:00:00:00'
        clock_display_2 = module_0.ClockDisplay(dict_0)
        assert len(clock_display_2.numbers) == 1
        var_1 = clock_display_2.increment()
    except BaseException:
        pass


def test_case_5():
    try:
        str_0 = 'dmt'
        clock_display_0 = module_0.ClockDisplay(str_0)
        assert len(clock_display_0.numbers) == 3
        var_0 = clock_display_0.clone()
        assert len(var_0.numbers) == 3
        var_1 = clock_display_0.invariant()
    except BaseException:
        pass


def test_case_6():
    try:
        bool_0 = True
        str_0 = 'Z*\\\r'
        int_0 = -57
        set_0 = {int_0, int_0}
        tuple_0 = int_0, set_0
        clock_display_0 = module_0.ClockDisplay(tuple_0)
        assert len(clock_display_0.numbers) == 2
        var_0 = clock_display_0.invariant()
        clock_display_1 = module_0.ClockDisplay(str_0)
        assert len(clock_display_1.numbers) == 4
        var_1 = clock_display_1.str()
        assert var_1 == '00:00:00:00'
        list_0 = [bool_0, bool_0]
        clock_display_2 = module_0.ClockDisplay(list_0)
        assert len(clock_display_2.numbers) == 2
        var_2 = clock_display_2.increment()
        assert var_2 is None
        var_3 = clock_display_2.str()
        assert var_3 == '00:00'
        float_0 = 1858.18098
        var_4 = clock_display_2.invariant()
        assert var_4 is True
        set_1 = {float_0, float_0}
        clock_display_3 = module_0.ClockDisplay(set_1)
        assert len(clock_display_3.numbers) == 1
        var_5 = clock_display_3.invariant()
        assert var_5 is True
        var_6 = clock_display_2.invariant()
        assert var_6 is True
        int_1 = 7
        var_7 = clock_display_2.clone()
        assert len(var_7.numbers) == 2
        clock_display_4 = module_0.ClockDisplay(int_1)
    except BaseException:
        pass
